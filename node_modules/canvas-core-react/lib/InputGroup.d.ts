import * as React from 'react';

export interface InputGroupError {
    label: string;
    message: string;
}

export type InputGroupInputRef = ((...args: any[])=>any) | Object;

export type InputGroupTooltip = React.ReactNode | Object;

export interface InputGroupProps {
    /**
     * The children inputs to appear within the input group
     */
    children?: React.ReactNode;
    /**
     * Optional classes can be added
     */
    className?: string;
    /**
     * Sets the InputGroup to the error state
     */
    error?: InputGroupError;
    /**
     * Ref access to DOM node - may be needed if using uncontrolled radio buttons or check boxes
     */
    inputRef?: InputGroupInputRef;
    /**
     * Id associated with the HTML fieldset within the InputGroup component
     */
    id: string;
    /**
     * True if the InputGroup is inline
     */
    inline?: boolean;
    /**
     * True if the inline label should be on the left. Only applicable if inline = true
     */
    labelLeft?: boolean;
    /**
     * Children node of the legend tag
     */
    legend: React.ReactNode;
    /**
     * Optional secondary label
     */
    secondaryLabel?: string;
    /**
     * If input group needs more explanation, can include a tooltip node that will appear beside label
     */
    tooltip?: InputGroupTooltip;
    /**
     * Specifies a name for the fieldset
     */
    name?: string;
    /**
     * Specifies that a group (fieldset) of related form elements should be disabled
     */
    disabled?: boolean;
    /**
     * Specifies which form the fieldset belongs to
     */
    form?: string;
}

declare const InputGroup: React.FC<InputGroupProps>;

export default InputGroup;

