import * as React from 'react';

export type PinTextFieldInitialValue = number | string;

export type PinTextFieldTooltip = React.ReactNode | Object;

export interface PinTextFieldError {
    label?: string;
    messages?: string[];
}

export type PinTextFieldLength = 4 | 6;

export type PinTextFieldSize = "large" | "small";

export type PinTextFieldColor = "white" | "gray";

export interface PinTextFieldUseTextForShowHideButton {
    show: string;
    hide: string;
}

export interface PinTextFieldProps {
    /**
     * Unique id for the PinTextField
     */
    id: string;
    /**
     * Optional initial value
     */
    initialValue?: PinTextFieldInitialValue;
    /**
     * Label to be associated with the PinTextField
     */
    label: string;
    /**
     * Optional secondary label displayed beside the primary label
     */
    secondaryLabel?: string;
    /**
     * If field needs more explanation, can include a tooltip node that will appear beside label
     */
    tooltip?: PinTextFieldTooltip;
    /**
     * Sets the error state and the error messages that will be displayed.
     */
    error?: PinTextFieldError;
    /**
     * Optional classes can be added
     */
    className?: string;
    /**
     * Number of inputs
     */
    length: PinTextFieldLength;
    /**
     * font size of the input field
     */
    size?: PinTextFieldSize;
    /**
     * Color of the input field
     */
    color?: PinTextFieldColor;
    /**
     * Optional callback function triggered when the PinTextField is updated
     */
    onChange?: (...args: any[])=>any;
    /**
     * Optional callback function triggered when the PinTextField is completed
     */
    onComplete?: (...args: any[])=>any;
    /**
     * Label announced by screenreader when focused on the ShowIcon
     */
    labelShowButton: string;
    /**
     * Label announced by screenreader when focused on the HideIcon
     */
    labelHideButton: string;
    /**
     * A function that takes a single parameter for the PIN digit
     * index and returns a label for an individual PIN digit input.
     * Used for aria-labels on each PIN digit input.
     */
    labelInputs?: (...args: any[])=>any;
    /**
     * Indicates if PinTextField field is in disabled state
     */
    disabled?: boolean;
    /**
     * Use text instead of icon for the password show/hide button
     */
    useTextForShowHideButton?: PinTextFieldUseTextForShowHideButton;
    /**
     * Splits inputs when length is 6
     */
    split?: any;
    showPin?: boolean;
}

declare const PinTextField: React.FC<PinTextFieldProps>;

export default PinTextField;

