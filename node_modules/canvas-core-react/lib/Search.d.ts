import * as React from 'react';

export interface SearchError {
    label?: string;
    messages?: string[];
}

export type SearchInputRef = ((...args: any[])=>any) | Object;

export type SearchTooltip = React.ReactNode | Object;

export type SearchVariant = "default" | "large";

export interface SearchProps {
    /**
     * Optional / additional class name
     */
    className?: string;
    /**
     * Label that is announced by screen reader when clear button is focused on
     */
    clearButtonLabel: string;
    /**
     * Default value for uncontrolled component
     */
    defaultValue?: string;
    /**
     * Specifies if the search allows to trigger the onSearchClick
     */
    disabled?: boolean;
    /**
     * Sets the error state and the error messages that will be displayed.
     */
    error?: SearchError;
    /**
     * unique id of component
     */
    id: string;
    /**
     * Ref to access dom node
     */
    inputRef?: SearchInputRef;
    /**
     * Label that is announced by screenreader - not visible
     */
    label: string;
    /**
     * Function that is called onChange for the search input field
     */
    onChange?: (...args: any[])=>any;
    /**
     * Function that is called when clear button is pressed
     */
    onClear?: (...args: any[])=>any;
    /**
     * Function that is called when search button is clicked
     */
    onSearchClick?: (...args: any[])=>any;
    /**
     * Placeholder when input field is empty. If showLabel = false, the label prop is used instead for the input placeholder (a11y requirement)
     */
    placeholder?: string;
    /**
     * Label that is announced by screen reader when search button is focused on
     */
    searchButtonLabel: string;
    /**
     * Optional label in lighter font to the right of the main label
     */
    secondaryLabel?: string;
    /**
     * Set to true to show the label
     */
    showLabel?: boolean;
    /**
     * If field needs more explanation, can include a tooltip node that will appear beside label
     */
    tooltip?: SearchTooltip;
    variant?: SearchVariant;
    /**
     * Value in input field for controlled component
     */
    value?: string;
}

declare const Search: React.FC<SearchProps>;

export default Search;

