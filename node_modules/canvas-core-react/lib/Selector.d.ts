import * as React from 'react';

export interface SelectorError {
    label?: string;
    messages?: string[];
}

export type SelectorTooltip = React.ReactNode | Object;

export interface SelectorProps {
    /**
     * The DOM nodes (options) to appear within the dropdown
     */
    children: React.ReactNode;
    /**
     * Optional classes can be added
     */
    className?: string;
    /**
     * Optional default value set in the dropdown, for uncontrolled component
     */
    defaultValue?: string;
    /**
     * Optional controlled value
     */
    value?: string;
    /**
     * id on the select element, also used for htmlFor on the label
     */
    id: string;
    /**
     * Label to be associated with the selector dropdown
     */
    label: string;
    /**
     * The name attribute on the select element
     */
    name: string;
    /**
     * onChange function for when the selector is updated
     */
    onChange?: (...args: any[])=>any;
    /**
     * Placeholder text for the selector dropdown
     */
    placeholder?: string;
    /**
     * Optional secondary label displayed beside the primary label
     */
    secondaryLabel?: string;
    /**
     * Sets the error state and the error messages that will be displayed.
     */
    error?: SelectorError;
    /**
     * Whether or not the text field is disabled
     */
    disabled?: boolean;
    /**
     * If field needs more explanation, can include a tooltip node that will appear beside label
     */
    tooltip?: SelectorTooltip;
    /**
     * An alert to display below Selector
     */
    alertMessage?: React.ReactNode;
    /**
     * id for annoucing error explicitily
     */
    ariaDescribedby?: string;
    /**
     * Optional light background behind input
     */
    withBackground?: boolean;
}

declare const Selector: React.FC<SelectorProps>;

export default Selector;

