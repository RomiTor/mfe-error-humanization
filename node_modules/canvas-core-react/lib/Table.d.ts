import * as React from 'react';

export type TableTitleSize = 18 | 21 | 24;

export interface TableColumns {
    name: string;
    headerFormatter?: (...args: any[])=>any;
    selector: string;
    sortable?: boolean;
    sortCompare?: (...args: any[])=>any;
    overrideSortBehaviour?: (...args: any[])=>any;
    initialSortDirection?: any | 0 | 1;
    grow?: number;
    right?: boolean;
    center?: boolean;
    cellFormatter?: (...args: any[])=>any;
    tooltip?: string;
    bodyStyle?: Object;
    headerStyle?: Object;
}

export type TableSize = "small" | "large";

export interface TableMobileStacked {
    primaryKey?: string;
    headingLevel?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6";
    cellFill?: "none" | "alternating" | "all";
}

export interface TableProps {
    /**
     * id for the table
     */
    id: string;
    /**
     * Optional classes can be added
     */
    className?: string;
    /**
     * table caption
     */
    title: string;
    /**
     * font size for the table caption
     */
    titleSize?: TableTitleSize;
    /**
     * Optional row highlights on hover
     */
    highlightOnHover?: boolean;
    /**
     * optional function for translating table title,
     * @param {string} text: header label text
     * @param {boolean} sortDirection: true for ascending & false for descending
     * @returns {string} text to be added to the table for screen reader, example: Transactions is sorted by Amount: ascending order
     */
    translateHeaderLabels?: (...args: any[])=>any;
    /**
     * columns of the table
     */
    columns: TableColumns[];
    /**
     * data to be populated in the table
     */
    data: any[];
    /**
     * resets the sort when changes to data have been detected
     */
    resetSortOnDataChange?: boolean;
    /**
     * Makes the first column in the table fixed
     */
    columnFixed?: boolean;
    /**
     * Optional size to increase the font-size and spacing in the table
     */
    size?: TableSize;
    /**
     * Optional stacked prop, used to render the stacked table in xs viewport
     */
    mobileStacked?: TableMobileStacked;
    /**
     * colors the odd rows
     */
    striped?: boolean;
}

declare const Table: React.FC<TableProps>;

export default Table;

