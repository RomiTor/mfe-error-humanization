import * as React from 'react';

export type TextAreaTextareaRef = ((...args: any[])=>any) | Object;

export type TextAreaTooltip = React.ReactNode | Object;

export interface TextAreaProps {
    /**
     * Set the character limit error state
     */
    charLimitError?: boolean;
    /**
     * Visible character limit error that shows up when the character limit is exceeded
     */
    charLimitMsg?: string;
    /**
     * Set the error state
     */
    error?: boolean;
    /**
     * Unique id of component
     */
    id: string;
    /**
     * Primary label to be displayed
     */
    label?: React.ReactNode;
    /**
     * Limit the amount of characters allowed before an error state is triggered
     */
    limit?: number;
    /**
     * Character limit error message translated string for screenreaders - should say '"x character limit, x characters remaining"
     */
    charLimitString?: (...args: any[])=>any;
    /**
     * "Error" translated string for screenreaders. ie: For French, '"Erreur"
     */
    errorString?: string;
    /**
     * Error message translated string
     */
    errorMsg?: string;
    /**
     * Maximum length of the string inside the text area
     */
    maxLength?: number;
    /**
     * Optional onChange callback function
     */
    onChange?: (...args: any[])=>any;
    /**
     * Placeholder text
     */
    placeholder?: string;
    /**
     * Sets the component to be responsive at xs-sm and md-lg breakpoints
     */
    responsive?: boolean;
    /**
     * Sets the rows attribute on the textarea element
     */
    rows?: number;
    /**
     * Secondary label to be displayed
     */
    secondaryLabel?: React.ReactNode;
    /**
     * Ref to access textarea dom node
     */
    textareaRef?: TextAreaTextareaRef;
    /**
     * Set the value in the textarea as a controlled component. Must pass in onChange to update value
     */
    value?: string;
    /**
     * Default value as an uncontrolled component
     */
    defaultValue?: string;
    /**
     * If field needs more explanation, can include a tooltip node that will appear beside label
     */
    tooltip?: TextAreaTooltip;
    /**
     * Optional classes can be added
     */
    className?: string;
    /**
     * Optional light background behind input
     */
    withBackground?: boolean;
}

declare const TextArea: React.FC<TextAreaProps>;

export default TextArea;

