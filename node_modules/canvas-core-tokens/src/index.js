import defaultTheme from './themes/light';
import dark from './themes/dark';
import grid from './grid';
import spacing from './spacing';
import canvasTokens from './tokens';

const ERROR_TYPE = 'Invalid Argument';
const CANVAS_CORE_TOKENS_PREFIX = '[canvas-core-tokens]';

const logInvalidArgumenError = (argName, argEnum) => {
  // eslint-disable-next-line no-console
  console.error(`${CANVAS_CORE_TOKENS_PREFIX} ${ERROR_TYPE}: valid values for '${argName}' are ${Object.keys(argEnum).join(',')}. Using default value '${argEnum.default}'`);
};

const SUPPORTED_THEMES = {
  itrade: 'itrade',
  default: 'default'
};

const SUPPORTED_MODES = {
  light: 'light',
  dark: 'dark',
  default: 'light'
};

export const getCanvasTokens = options => {
  const { mode, theme } = options || {};
  let currentMode = mode || SUPPORTED_MODES.default;
  let currentTheme = theme || SUPPORTED_THEMES.default;
  if (currentMode && !SUPPORTED_MODES[currentMode]) {
    currentMode = SUPPORTED_MODES.default;
    logInvalidArgumenError('mode', SUPPORTED_MODES);
  }

  if (currentTheme && !SUPPORTED_THEMES[currentTheme]) {
    currentTheme = SUPPORTED_THEMES.default;
    logInvalidArgumenError('theme', SUPPORTED_THEMES);
  }
  return canvasTokens({ mode: currentMode, theme: currentTheme });
};

// TODO: Everything below this will be deprecated once we are fully migrated to using tokens. We will need to update CanvasThemeProvider to use getCanvasTokens function

const getPalette = mode => {
  const themes = { dark };
  const brandColors = {
    light: {
      red: '#ec111a',
      orange: '#fb6330',
      green: '#138468',
      blue: '#009dd6',
      purple: '#7849b8',
      pink: '#f2609e',
      yellow: '#ffd42f',
      black: '#333333',
      darkRed: '#BE061B',
      darkBlue: '#007EAB',
      white: '#FFFFFF'
    },
    dark: {
      red: '#ff969c',
      orange: '#ffba8e',
      green: '#84d9c6',
      blue: '#91ddf8',
      purple: '#aea9f4',
      pink: '#fda8de',
      yellow: '#ffeaa5',
      black: '#757575',
      white: '#333333'
    }
  };

  const common = { white: '#FFFFFF', black: '#333333' };

  const canvasGrey = {
    100: '#FAFBFD',
    200: '#F6F7FC',
    300: '#F6F6F6',
    400: '#E2E8EE',
    500: '#D6D6D6',
    600: '#757575',
    700: '#949494'
  };

  const canvasShadow = 'rgba(0, 34, 91, 0.11)';

  return {
    ...defaultTheme,
    ...themes[mode],
    brandColors,
    canvasGrey,
    canvasShadow,
    common
  };
};

const getCanvasTheme = mode => {
  const fallbackFonts = '"Arial", "Helvetica", "sans-serif"';
  const typography = {
    fontLightFamily: `"Scotia Light", ${fallbackFonts}`,
    fontRegularFamily: `"Scotia Regular", ${fallbackFonts}`,
    fontBoldFamily: `"Scotia Bold", ${fallbackFonts}`,
    fontHeadlineFamily: `"Scotia Headline", ${fallbackFonts}`,
    fontItalicFamily: `"Scotia Italic", ${fallbackFonts}`,
    fontBoldItalicFamily: `"Scotia Bold Italic", ${fallbackFonts}`
  };

  return {
    type: mode || 'light',
    breakPoints: {
      values: {
        lg: 1025,
        md: 768,
        sm: 481,
        xs: 0
      }
    },
    palette: getPalette(mode),
    transitions: {
      duaration: {
        sideSheetMainWrapper: '600ms'
      },
      effect: {
        easing: {
          easeInOut: 'ease-in-out'
        }
      }
    },
    typography,
    tokens: getCanvasTokens({ mode })
  };
};

export const SPACING = spacing;

export const GRID = grid;

export default getCanvasTheme;
